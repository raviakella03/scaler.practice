package me.ravi.scaler.practice.service.intermediatedsa;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.ArrayList;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.assertTrue;

@SpringBootTest
class AlternatingSubArraysTest {

    @Autowired
    AlternatingSubArrays alternatingSubArrays;
    ArrayList<Integer> A;
    Integer B;
    ArrayList<Integer> expectedOutput;
    ArrayList<Integer> actualOutput;

    @AfterEach
    public void checkOutput() {
        actualOutput = alternatingSubArrays.solve(A, B);
        assertTrue(validateOutput(expectedOutput, actualOutput));
    }

    private boolean validateOutput(ArrayList<Integer> expectedOutput, ArrayList<Integer> actualOutput) {
        if (actualOutput == null) {
            return false;
        }
        if (actualOutput.size() != expectedOutput.size()) {
            return false;
        }
        for (int i = 0; i < expectedOutput.size(); i++) {
            if (null != actualOutput.get(i)) {
                if (actualOutput.get(i).intValue() != expectedOutput.get(i).intValue()) {
                    return false;
                }
            }
        }
        return true;
    }

    @Test
    public void scenario1() {
        A = new ArrayList<>(Arrays.asList(1, 0, 1, 0, 1));
        B = 1;
        expectedOutput = new ArrayList<>(Arrays.asList(1, 2, 3));
    }

    @Test
    public void scenario2() {
        A = new ArrayList<>(Arrays.asList(0, 0, 0, 1, 1, 0, 1));
        B = 0;
        expectedOutput = new ArrayList<>(Arrays.asList(0, 1, 2, 3, 4, 5, 6));
    }

    @Test
    public void scenario3() {
        A = new ArrayList<>(Arrays.asList(0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1));
        B = 1;
        expectedOutput = new ArrayList<>(Arrays.asList(3, 7, 8));
    }

    @Test
    public void scenario4() {
        A = new ArrayList<>(Arrays.asList(0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1));
        B = 1;
        expectedOutput = new ArrayList<>(Arrays.asList(4, 8, 9, 19, 25, 26, 43, 44, 45, 55, 60, 70, 81, 93, 101, 121, 124, 128, 133, 134, 138, 143, 153, 154, 158, 159, 162, 163, 168, 172, 173, 176, 177, 180, 181, 194, 211, 212, 223, 224, 225, 226, 227, 228, 239, 240, 241, 242, 251, 257, 258, 259, 268, 269, 272, 275, 276, 277, 278, 281, 282, 283, 284, 288, 291, 294, 295, 302, 303, 312, 313, 318, 321, 322, 327, 328, 329, 330, 336, 343, 344, 345, 351, 360, 366, 377, 387, 398, 399, 400, 401, 409, 415, 416, 417, 418, 429, 430, 431, 432, 433, 434, 435, 439, 444, 447, 448, 449, 450, 451, 456, 457, 458, 470, 477, 480, 481, 482, 491, 492, 493, 498, 514, 515, 518, 519, 528, 531, 532, 538, 542, 545, 546, 547, 551, 552, 553, 556, 562, 565, 566, 567, 575, 583, 590, 595, 598, 599, 600, 605, 608, 609, 610, 620, 621, 629, 641, 654, 659, 660, 669, 674, 677, 680, 681, 687, 693, 694, 709, 710, 713, 714, 722, 723, 726, 733, 734, 735, 736, 737, 740, 745, 746, 747, 748, 753, 754, 758, 759, 772, 773, 783, 790, 791, 792, 793, 794, 802, 803, 809, 810, 823, 824, 831, 832, 839, 842, 848, 849, 850, 854, 870, 873, 877, 878, 879, 880, 881, 882, 883, 884, 889, 890, 894, 895, 899, 900, 901, 907, 908, 911, 912, 913, 922, 923, 927, 928, 929, 934, 935, 938, 939, 940, 943, 947, 961, 967, 968, 969, 973, 974, 975, 976, 977, 978, 991));
    }
}